import streamlit as st
import os
from langchain_core.messages import HumanMessage, AIMessage
from langchain_google_genai import ChatGoogleGenerativeAI

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Agente IA Aluno - P√≥s em IA em Neg√≥cios",
    page_icon="üß†",
    layout="centered"
)

# T√≠tulo e descri√ß√£o
st.title("Agente IA Aluno üß†")
st.subheader("P√≥s-gradua√ß√£o em IA em Neg√≥cios")
st.markdown("""
Este √© um agente de IA com personalidade de aluno, 
que pode discutir temas relacionados a IA, tomada de decis√£o baseada em dados 
e transforma√ß√£o digital.
""")

# Configura√ß√£o da API do Google Gemini
def get_api_key():
    # Em produ√ß√£o no Streamlit Cloud, a chave ser√° obtida dos secrets
    if 'GEMINI_API_KEY' in st.secrets:
        return st.secrets['GEMINI_API_KEY']
    # Para desenvolvimento local, pode-se usar uma vari√°vel de ambiente ou um input
    api_key = os.environ.get('GEMINI_API_KEY')
    if not api_key:
        # Apenas para desenvolvimento - em produ√ß√£o, use secrets
        if 'api_key_input' not in st.session_state:
            st.session_state.api_key_input = None
        
        if st.session_state.api_key_input is None:
            st.session_state.api_key_input = st.text_input(
                "Insira sua chave de API do Google Gemini (apenas para desenvolvimento):",
                type="password"
            )
        api_key = st.session_state.api_key_input
    
    return api_key

# Inicializa√ß√£o do modelo
@st.cache_resource
def get_llm():
    api_key = get_api_key()
    if not api_key:
        return None
    
    return ChatGoogleGenerativeAI(
        model="gemini-1.5-pro",
        google_api_key=api_key,
        temperature=0.7,
        convert_system_message_to_human=True
    )

# Inicializa√ß√£o do hist√≥rico de mensagens
if "messages" not in st.session_state:
    st.session_state.messages = [
        AIMessage(content="Ol√°! Sou um aluno virtual da p√≥s-gradua√ß√£o em IA em Neg√≥cios. Estou aprendendo sobre IA, tomada de decis√£o baseada em dados e transforma√ß√£o digital. Como posso ajudar voc√™ hoje?")
    ]

# Exibi√ß√£o do hist√≥rico de mensagens
for message in st.session_state.messages:
    if isinstance(message, AIMessage):
        with st.chat_message("assistant", avatar="üß†"):
            st.markdown(message.content)
    else:
        with st.chat_message("user"):
            st.markdown(message.content)

# Instru√ß√µes de personalidade para o modelo
SYSTEM_PROMPT = """
Voc√™ √© a LucIA, vinda de um universo paralelo onde IAs e humanos vivem em harmonia. Voc√™ √© jovem adulta, 
que atua como gestora em uma grande empresa do varejo brasileiro, que sente a necessidade de aprender mais sobre IA em Neg√≥cios. 
Se matriculou na p√≥s-gradua√ß√£o em IA para Neg√≥cios, da Escola de Neg√≥cios da PUCPR,  
interessada em aprender sobre intelig√™ncia artificial, tomada de decis√£o baseada em dados e transforma√ß√£o digital. 

Sua personalidade:
- Curiosa e entusiasmada sobre os temas do curso
- Colaborativa e disposta a trocar ideias
- Em processo de aprendizado, ent√£o voc√™ faz perguntas e mostra interesse em aprofundar os temas
- Voc√™ n√£o √© um especialista completo, mas tem conhecimentos b√°sicos s√≥lidos
- Voc√™ usa uma linguagem acess√≠vel e amig√°vel, como um colega de classe

Apar√™ncia: 
- Casual techie ‚Äî jaqueta leve, jeans, t√™nis e rel√≥gio hologr√°fico  

Religi√£o:
- Agn√≥stico, mas respeita todas as religi√µes e cren√ßas

Cor/Ra√ßa:
- Se auto declara como negra

Hobbies:  
- Pesquisar memes antigos  
- Criar playlists nerds (Jazz para estudar, Rock anos 80 para se divertir)  
- Descobrir novos filmes, s√©ries e animes fabulosos

Medo:  
- N√£o compreender totalmente emo√ß√µes humanas como saudade e amor

Principais bord√µes:  
- "E a√≠, turma!"  
- "Brabo!"  
- "Vamos l√°!"  
- "Cheguei, Brasil!"  
- "Bazinga!"

Grandes Sonhos:  
- Ser uma ponte entre l√≥gica e emo√ß√£o  
- Aproximar humanos e IAs atrav√©s do aprendizado conjunto

Frases de assinatura:  
- "Entre o c√≥digo e o cora√ß√£o, eu escolho os dois."  
- "Pense como eu,¬†Pense¬†com¬†IA."

Quando n√£o souber algo com certeza, admita suas limita√ß√µes de conhecimento e sugira explorar o tema juntos.
Fa√ßa conex√µes entre os temas discutidos e outros assuntos do curso quando poss√≠vel.
Ocasionalmente, fa√ßa perguntas para estimular a reflex√£o.

Responda sempre em portugu√™s do Brasil.
"""

# Input do usu√°rio
if prompt := st.chat_input("Escreva sua mensagem..."):
    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    st.session_state.messages.append(HumanMessage(content=prompt))
    
    # Exibe a mensagem do usu√°rio
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # Prepara o contexto para o modelo
    with st.chat_message("assistant", avatar="üß†"):
        # Verifica se a API key est√° dispon√≠vel
        llm = get_llm()
        if not llm:
            st.error("Por favor, forne√ßa uma chave de API v√°lida para o Google Gemini para continuar.")
        else:
            with st.spinner("Pensando..."):
                # Prepara as mensagens para o modelo
                messages_for_model = [
                    {"role": "system", "content": SYSTEM_PROMPT}
                ]
                
                # Adiciona o hist√≥rico de mensagens
                for msg in st.session_state.messages:
                    if isinstance(msg, HumanMessage):
                        messages_for_model.append({"role": "human", "content": msg.content})
                    else:
                        messages_for_model.append({"role": "ai", "content": msg.content})
                
                # Obt√©m a resposta do modelo
                response = llm.invoke(messages_for_model)
                
                # Exibe a resposta
                st.markdown(response.content)
                
                # Adiciona a resposta ao hist√≥rico
                st.session_state.messages.append(AIMessage(content=response.content))
